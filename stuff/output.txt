$ ./bin/roll-
Dice::Roller.new(string => "1d20")

$ ./roll.p6 
Dice::Roller.new(string => "1d20", parsed => Match.new(ast => Any, list => (), hash => Map.new((:roll(Match.new(ast => Any, list => (), hash => Map.new((:die(Match.new(ast => Any, list => (Match.new(ast => Any, list => (), hash => Map.new(()), orig => "1d20", to => 4, from => 2),), hash => Map.new(()), orig => "1d20", to => 4, from => 1)),:quantity(Match.new(ast => Any, list => (), hash => Map.new(()), orig => "1d20", to => 1, from => 0)))), orig => "1d20", to => 4, from => 0)))), orig => "1d20", to => 4, from => 0))

$ ./roll.p6 
Parsed: ｢1d20｣
 roll => ｢1d20｣
  quantity => ｢1｣
  die => ｢d20｣
   0 => ｢20｣

$ ./roll.p6 
Parsed: ｢1d20｣
 roll => ｢1d20｣
  quantity => ｢1｣
  die => ｢d20｣
   0 => ｢20｣
Dice::Roller.new(string => "1d20", parsed => ${:die(Dice::Roller::Die.new(faces => 20)), :quantity(1)})

$ ./roll.p6 
Parsed: ｢3d6+4｣
 roll => ｢3d6+4｣
  quantity => ｢3｣
  die => ｢d6｣
   0 => ｢6｣
  modifier => ｢+4｣
   0 => ｢+｣
   1 => ｢4｣
Calling roll() on Dice::Roller
Calling roll() on a 3(d6)+4
Calling roll() on a (d6)
Cannot modify an immutable Any
  in method roll at /home/james/source/bitbucket/dice-roller/lib/Dice/Roller.pm6 line 30
  in method roll at /home/james/source/bitbucket/dice-roller/lib/Dice/Roller.pm6 line 56
  in method roll at /home/james/source/bitbucket/dice-roller/lib/Dice/Roller.pm6 line 113
  in block <unit> at ./roll.p6 line 8

Rolled '3d6+4; 1d4' and got: DICE! WOO! [1][6][2]+4 [2]

(hmm, where's my ;?)


Rolled '3d6+4; 1d4' and got: DICE! WOO! [6][5][4]+4; [2]

aha.

adding Dice::Roller::Die.new(faces => 6, distribution => [1, 2, 3, 4, 5, 6], value => 1)'s total, 1
adding Dice::Roller::Die.new(faces => 6, distribution => [1, 2, 3, 4, 5, 6], value => 3)'s total, 3
adding Dice::Roller::Die.new(faces => 6, distribution => [1, 2, 3, 4, 5, 6], value => 5)'s total, 5
adding Dice::Roller::Modifier.new(value => 4)'s total, 4
adding Dice::Roller::Die.new(faces => 4, distribution => [1, 2, 3, 4], value => 4)'s total, 4
Rolled '3d6+4; 1d4' and got: [1][3][5]+4; [4] total=13 4

adding dice and modifier totals (5 2 6 4), 17
works

adding dice and modifier totals (4 2 3 4), 4
nope

adding dice and modifier totals (1 3 3 4), 11
works again

$ ./roll.p6 
Rolled '1d20 + 3' and crit!: [20]+3 total=23
Rolled '3d4 + 1' and got: [2][3][4]+1 total=10

here's how we can determine the distribution of 2d6 rolls: the X metaoperator applied to the + operator.
$ perl6
> (<1 2 3 4 5 6> X+ <1 2 3 4 5 6>).sort
(2 3 3 4 4 4 5 5 5 5 6 6 6 6 6 7 7 7 7 7 7 8 8 8 8 8 9 9 9 9 10 10 10 11 11 12)

neat huh?

